# workflows/test-paradedb.yml
#
# Test ParadeDB
# Test building the ParadeDB Docker Image using Docker Compose.

name: Test ParadeDB

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - dev
    paths:
      - ".github/workflows/test-paradedb.yml"
      - "docker/**"
      - "pg_analytics/**"
      - "!pg_analytics/README.md"
      - "pg_search/**"
      - "!pg_search/README.md"
      - "shared/**"
      - "tokenizers/**"
  workflow_dispatch:

concurrency:
  group: test-paradedb-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-paradedb:
    name: Test ParadeDB on PostgreSQL ${{ matrix.pg_version }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        include:
          - runner: depot-ubuntu-latest-8
            pg_version: 16
            arch: amd64
          - runner: depot-ubuntu-latest-arm-8
            pg_version: 16
            arch: arm64

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      # By using the docker-compose.dev.yml file, we also test that the build arguments are correct
      - name: Build the ParadeDB Docker Image
        working-directory: docker/
        run: docker buildx create --use && docker compose -f docker-compose.dev.yml build

      # Sleep 10 seconds to give time for Postgres to start inside the container
      - name: Start the ParadeDB Docker Image
        working-directory: docker/
        run: docker compose -f docker-compose.dev.yml up -d && sleep 10

      # We run the container in detached mode, and grep for the word ERROR to see if it failed to start correctly
      - name: Check for Errors in the ParadeDB Docker Image
        working-directory: docker/
        run: |
          CONTAINER_ID=$(docker ps -aq --filter "name=paradedb-dev")
          CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' $CONTAINER_ID)
          echo "paradedb-dev container ID: $CONTAINER_ID"
          echo "Container status: $CONTAINER_STATUS"

          echo ""
          echo "Printing logs for the ParadeDB Docker container..."
          docker logs $CONTAINER_ID

          # Fail the run if the container failed to start
          if [ "$CONTAINER_STATUS" = "exited" ]; then
            echo "Error: Container failed to start properly"
            exit 1
          fi

          # Fail the run if there are any Postgres ERRORs in the logs
          if docker logs $CONTAINER_ID | grep -q ERROR; then
            echo "Error: ParadeDB Docker container logs contain an error"
            exit 1
          fi

  test-paradedb-helm-chart:
    name: Test ParadeDB Helm Chart for PostgreSQL ${{ matrix.pg_version }}
    runs-on: depot-ubuntu-latest-2
    strategy:
      matrix:
        pg_version: [16]

    steps:
      - name: Trigger paradedb/helm-charts Test Workflow
        uses: multinarity/workflow-dispatch@master
        with:
          token: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
          workflow: test-helm-chart.yml
          repo: paradedb/helm-charts
          ref: main

      - name: Wait for paradedb/helm-charts Test Workflow to Complete
        run: |
          while true; do
            status=$(curl -s -H "Authorization: token ${{ secrets.GHA_CREATE_RELEASE_PAT }}" \
              https://api.github.com/repos/paradedb/helm-charts/actions/workflows/test-helm-chart.yml/runs?event=repository_dispatch \
              | jq -r '.workflow_runs[0].status')
            if [ "$status" = "completed" ]; then
              break
            fi
            sleep 10
          done

      - name: Report paradedb/helm-charts Test Workflow Conclusion
        run: |
          conclusion=$(curl -s -H "Authorization: token ${{ secrets.GHA_CREATE_RELEASE_PAT }}" \
            https://api.github.com/repos/paradedb/helm-charts/actions/workflows/test-helm-chart.yml/runs?event=repository_dispatch \
            | jq -r '.workflow_runs[0].conclusion')
          if [ "$conclusion" = "success" ]; then
            echo "Helm chart test passed"
            exit 0
          else
            echo "Helm chart test failed"
            exit 1
          fi
